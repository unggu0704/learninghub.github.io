

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/learninghub/</id>
  <title>Unggu</title>
  <subtitle>엉구</subtitle>
  <updated>2024-12-15T20:45:38+09:00</updated>
  <author>
    <name>김규형</name>
    <uri>http://localhost:4000/learninghub/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/learninghub/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/learninghub/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 김규형 </rights>
  <icon>/learninghub/assets/img/favicons/favicon.ico</icon>
  <logo>/learninghub/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Vison control</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Vison-Control/" rel="alternate" type="text/html" title="Vison control" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T15:10:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Vison-Control/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Vison-Control/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005- Software Construction" />
    
  

  <summary>Objectives


  version control이 무엇이고 왜 사용하는지 파악합니다.
  어떻게 git이 version history를 그래프로 저장하는지 이해합니다.
  version history를 사용하고 읽고 만드는것을 연습합니다.


Introduction


  Version control 시스템은 소프트웨어 공학에선 필수적인 도구입니다. 대부분의 오픈, 취미 등등에서 사용합니다.
  version control 없이 팀원의 모든 코드를 조절하는 것은 매우 어렵다.


version control 없는 버전 제어


  드롭박스
  undo/redo
  파일에 번호를 붙여 저장




Inventing version control(버전 컨트롤의 발명)

엘리스 혼자서 개발할때


  ...</summary>

  </entry>

  
  <entry>
    <title>Abstraction functions &amp; rep invariants</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstraction-Functions-&amp;-Rep-Invariants/" rel="alternate" type="text/html" title="Abstraction functions &amp;amp; rep invariants" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T15:10:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstraction-Functions-&amp;-Rep-Invariants/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstraction-Functions-&amp;-Rep-Invariants/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005- Software Construction" />
    
  

  <summary>Objectives


  Invariants
  representation exposure
  abstraction functions
  
    representation Invariants
  
  추상화 함수 그리고 Invariants(상수)의 개념을 통해 class에 ADT를 구현하는것이 무엇을 의미하는지에 대해 공부한다.
  이러한 수학적 개념은 소프트웨어 디자인에 있어 매우 실용적이다.
  추상함수는 데이터 유형에 따른 equality를 정의하는 방법을 제공한다.
  rep invariant는 데이터 구조로 인해 발생되는 버그를 더 쉽게 찾을 수 있게 제공한다.


Invariants


  좋은 ADT를 만드는것에 대한 논의에 대해서 가장 중요한 속성은 그 자체로 불변성을 보존하는 것이다...</summary>

  </entry>

  
  <entry>
    <title>Abstract data types(23.10.04)</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstract-Data-Types(23.10.04)/" rel="alternate" type="text/html" title="Abstract data types(23.10.04)" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T15:10:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstract-Data-Types(23.10.04)/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstract-Data-Types(23.10.04)/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005- Software Construction" />
    
  

  <summary>Objects


  추상 자료형
  표현 독립성
  추상 데이터 유형의 위험한 문제를 해결하고, 클라이언트가 내부 표현에 대한 가정이 왜 위험하고, 어떻게 그것을 피할 수 있는가?
  연산의 분류와 추상적인 데이터 유형에 대한 좋은 설계 원리를 세우는법


What Abstraction Means


  추상화 데이터 유형은 소프트웨어 공학의 일반적인 원리 중 하나
  다양한 의미로 이야기 되어진다.
    
      추상화 : 낮은 정보를 숨기고 더 단순하게 표현
      모듈화 : 시스템을 모듈로 나누고, 각 구성 요소에 설계, 구현 등의 기능을 추가
      캡슐화 : 모듈 주위에 벽을 만들어 모듈 내부가 각자 스스로에게 책임을 부여, 다른 부분의 무결성 보장
      정보 숨김 : 모듈...</summary>

  </entry>

  
  <entry>
    <title>Testing</title>
    <link href="http://localhost:4000/learninghub/Testing/" rel="alternate" type="text/html" title="Testing" />
    <published>2024-12-15T00:00:00+09:00</published>
  
    <updated>2024-12-15T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/Testing/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/Testing/" />
    <author>
      <name>김규형</name>
    </author>

  
    
  

  <summary>Testing(23.09.14)

이번 장의 목표


  Test-first programmin의 절차를 알고, 테스팅 값을 이해하는것
  메소드의 input과 output에 적절한 테스트를 디자인 하고 좋은 TC를 고르는것
  테스트가 코드에 어느 범위 까지 적용 되는것을 이해하는것
  블랙박스와 화이트박스 테스트를 이해하고 유닛과 통합 테스트 그리고 자동 회귀 테스트를 이해한다.


검증


  일반적으로 테스팅의 대부분 절차는 검증이라 불린다.
  검증의 목표는 야기 될 수 있는 프로그램의 잠재적 문제를 찾아 정확성을 높이는 것.
  검증은 아래를 포함한다.
    
      Foraml reasoning(형식추론) : 공식 증명으로 프로그램을 검증한다. 손으로 하는것보다 tool을 주로 사용,...</summary>

  </entry>

  
  <entry>
    <title>Static checking</title>
    <link href="http://localhost:4000/learninghub/Static-Checking/" rel="alternate" type="text/html" title="Static checking" />
    <published>2024-12-15T00:00:00+09:00</published>
  
    <updated>2024-12-15T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/Static-Checking/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/Static-Checking/" />
    <author>
      <name>김규형</name>
    </author>

  
    
  

  <summary>STATIC CHECKING(23.09.12)

**Hailstone Sequence**


  
    n이 짝수일 때 n / 2, n이 홀수 일때 3n + 1

      2, 1         
  3, 10, 5, 16, 8, 4, 2, 1     
  4, 2, 1
  2n, 2n-1 , ... , 4, 2, 1
  5, 16, 8, 4, 2, 1
  7, 22, 11, 34, 17, 52, 6, 13, 40, ...? (where does this stop?)
    
  
  
    이런 코드를 하일스톤(우박) 코드… 왜? → 왔다갔다 하니깐….
  


Type


  타입 → 값의 집합
  Primitive Types (원시 타입) (int, long, boolean…)
  Objec...</summary>

  </entry>

</feed>


