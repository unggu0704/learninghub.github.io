

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/learninghub/</id>
  <title>Unggu</title>
  <subtitle>엉구</subtitle>
  <updated>2024-12-16T01:02:30+09:00</updated>
  <author>
    <name>김규형</name>
    <uri>http://localhost:4000/learninghub/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/learninghub/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/learninghub/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 김규형 </rights>
  <icon>/learninghub/assets/img/favicons/favicon.ico</icon>
  <logo>/learninghub/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Vison control</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Vison-Control/" rel="alternate" type="text/html" title="Vison control" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-16T00:57:58+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-software%20construction/Vison-Control/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Vison-Control/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005-Software Construction" />
    
  

  <summary>Objectives


  version control이 무엇이고 왜 사용하는지 파악하기
  어떻게 git이 version history를 그래프로 저장하는지 이해
  version history를 사용하고 읽고 만드는것을 연습


Introduction


  Version control 시스템은 소프트웨어 공학에선 필수적인 도구입니다. 대부분의 오픈, 취미 등등에서 사용.
  version control 없이 팀원의 모든 코드를 조절하는 것은 매우 어렵다.


version control 없는 버전 제어


  드롭박스
  undo/redo
  파일에 번호를 붙여 저장




Inventing version control(버전 컨트롤의 발명)

엘리스 혼자서 개발할때


  version contr...</summary>

  </entry>

  
  <entry>
    <title>Testing</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Testing/" rel="alternate" type="text/html" title="Testing" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T22:55:32+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-software%20construction/Testing/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Testing/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005-Software Construction" />
    
  

  <summary>이번 장의 목표


  Test-first programmin의 절차를 알고, 테스팅 값을 이해하는것
  메소드의 input과 output에 적절한 테스트를 디자인 하고 좋은 TC를 고르는것
  테스트가 코드에 어느 범위 까지 적용 되는것을 이해하는것
  블랙박스와 화이트박스 테스트를 이해하고 유닛과 통합 테스트 그리고 자동 회귀 테스트를 이해한다.


검증


  일반적으로 테스팅의 대부분 절차는 검증이라 불린다.
  검증의 목표는 야기 될 수 있는 프로그램의 잠재적 문제를 찾아 정확성을 높이는 것.
  검증은 아래를 포함한다.
    
      Foraml reasoning(형식추론) : 공식 증명으로 프로그램을 검증한다. 손으로 하는것보다 tool을 주로 사용, 주로 운영체제 스케줄러, 바이트코...</summary>

  </entry>

  
  <entry>
    <title>Static checking</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Static-Checking/" rel="alternate" type="text/html" title="Static checking" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T22:55:32+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-software%20construction/Static-Checking/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Static-Checking/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005-Software Construction" />
    
  

  <summary>**Hailstone Sequence**


  
    n이 짝수일 때 n / 2, n이 홀수 일때 3n + 1

      2, 1         
  3, 10, 5, 16, 8, 4, 2, 1     
  4, 2, 1
  2n, 2n-1 , ... , 4, 2, 1
  5, 16, 8, 4, 2, 1
  7, 22, 11, 34, 17, 52, 6, 13, 40, ...? (where does this stop?)
    
  
  
    이런 코드를 하일스톤(우박) 코드… 왜? → 왔다갔다 하니깐….
  


Type


  타입 → 값의 집합
  Primitive Types (원시 타입) (int, long, boolean…)
  Object Type (객체 타입) (String, Bin...</summary>

  </entry>

  
  <entry>
    <title>Specifications</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Specifications/" rel="alternate" type="text/html" title="Specifications" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-16T00:57:58+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-software%20construction/Specifications/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Specifications/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005-Software Construction" />
    
  

  <summary>Specifications란 무엇인가?


  심각한 버그는 인터페이스의 동작에 대한 오해에서 나타난다.
  정확한 명세를 활용해 비난을 사람이 아닌 코드로 옮겨야한다.
  
    BigIntefer에 대한 명세와 코드

      /*
   * 명세
   */
    
  public BigInteger add(BigInteger val)
    
  Returns a BigInteger whose value is (this + val).
    
  Parameters: 
  val - value to be added to this BigInteger.
    
  Returns: 
  this + val
    

      /*
   * 실제 코드 
   */
  if (val.signum =...</summary>

  </entry>

  
  <entry>
    <title>Recursive data types</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Recursive-Data-Types/" rel="alternate" type="text/html" title="Recursive data types" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-16T00:57:58+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-software%20construction/Recursive-Data-Types/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Recursive-Data-Types/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005-Software Construction" />
    
  

  <summary>Recursive functions

재귀적 함수가 자기 자신의 관점에 따라 정의되는 것과 같이 재귀적 자료형 또한 자기 관점에서 정의된다.

Immutable lists


  immutable list 인 ImList&amp;amp;lt;E&amp;amp;gt; 이것이 4가지의 작동을 한다고 생각
    
      empty: void → ImList
      cons: E × ImList → ImList
      first: ImList → E
      rest: ImList → ImList
    
  
  위 규칙들은 List 나 Scheme 의 기본적인 요소로 현재에서도 함수적 프로그래밍에 있어 널리 사용됨
  
    이 데이터 유형을 구현하기 위해 Java 클래스를 비트 연사자를 사용한다면 아래와 같은 의미를...</summary>

  </entry>

</feed>


