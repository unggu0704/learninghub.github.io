

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/learninghub/</id>
  <title>Unggu</title>
  <subtitle>엉구</subtitle>
  <updated>2024-12-15T22:22:42+09:00</updated>
  <author>
    <name>김규형</name>
    <uri>http://localhost:4000/learninghub/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/learninghub/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/learninghub/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 김규형 </rights>
  <icon>/learninghub/assets/img/favicons/favicon.ico</icon>
  <logo>/learninghub/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Vison control</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Vison-Control/" rel="alternate" type="text/html" title="Vison control" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T15:10:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Vison-Control/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Vison-Control/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005- Software Construction" />
    
  

  <summary>Objectives


  version control이 무엇이고 왜 사용하는지 파악합니다.
  어떻게 git이 version history를 그래프로 저장하는지 이해합니다.
  version history를 사용하고 읽고 만드는것을 연습합니다.


Introduction


  Version control 시스템은 소프트웨어 공학에선 필수적인 도구입니다. 대부분의 오픈, 취미 등등에서 사용합니다.
  version control 없이 팀원의 모든 코드를 조절하는 것은 매우 어렵다.


version control 없는 버전 제어


  드롭박스
  undo/redo
  파일에 번호를 붙여 저장




Inventing version control(버전 컨트롤의 발명)

엘리스 혼자서 개발할때


  ...</summary>

  </entry>

  
  <entry>
    <title>Mutability &amp; immutability</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Mutability-&amp;-Immutability/" rel="alternate" type="text/html" title="Mutability &amp;amp; immutability" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T15:10:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-software%20construction/Mutability-&amp;-Immutability/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-software%20construction/Mutability-&amp;-Immutability/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005-Software Construction" />
    
  

  <summary>Object


  가변 객체와 가변성에 대해 이핸다.
  allasing(별명 짓기)를 Identify 성과 가변성의 위험을 이해
  불변성을 사용해 정확성, 명확성,등을 개선한다.


**Mutability**


  Java의 일부 객체는 불변성을 가지고 있다.
  한번 생성되면 → 항상 동일한 값을 가지고 있다. [Immutability]
  한번 생성되면 → 추후 값을 변경하는 메소드가 있다. [Mutability]
  
    String 은 불변 타입의 가장 큰 예시이다. 같은 객체는 항상 동일한 문자열만을 나타낸다.

      String s = &amp;quot;a&amp;quot;;
  s = s.concat(&amp;quot;b&amp;quot;); // s+=&amp;quot;b&amp;quot; and s=s+&amp;quot;b&amp;quot; also mean the same thing
    
 ...</summary>

  </entry>

  
  <entry>
    <title>Debugguing</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Debugguing/" rel="alternate" type="text/html" title="Debugguing" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T15:10:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Debugguing/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Debugguing/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005- Software Construction" />
    
  

  <summary>Objects
    
      체계적인 디버깅
      디버깅이 선택되어 질 때가 있다. (전체 시스템이 함께 연결되거나, 배포 후에 사용자 보고)
      버그가 현지화가 불가능 할때에는 디버깅이 좋은 전략이 될 수도 있다.
    
  


Reproduce the Bug


  고장을 야기하는 테스트케이스를 반복해서 시도한다.
  regression tesing을 통해 버그를 찾는데 성공 했다면, 운이 좋은편
  사용자가 버그를 제보 했다면 이에 반해 약간의 노력이 필요하다.
  하지만 이 환경이 그래픽 사용 인터페이스 또는 멀티 스레드 환경이라면 버그를 찾는 것은 더 어려워진다.
  물론 작은 테스트 케이스를 만들어 반복적으로 실행하는 것은 도움이 된다.
  반복해서 실행 하고 버그를 찾...</summary>

  </entry>

  
  <entry>
    <title>Abstraction functions &amp; rep invariants</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstraction-Functions-&amp;-Rep-Invariants/" rel="alternate" type="text/html" title="Abstraction functions &amp;amp; rep invariants" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T15:10:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstraction-Functions-&amp;-Rep-Invariants/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstraction-Functions-&amp;-Rep-Invariants/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005- Software Construction" />
    
  

  <summary>Objectives


  Invariants
  representation exposure
  abstraction functions
  
    representation Invariants
  
  추상화 함수 그리고 Invariants(상수)의 개념을 통해 class에 ADT를 구현하는것이 무엇을 의미하는지에 대해 공부한다.
  이러한 수학적 개념은 소프트웨어 디자인에 있어 매우 실용적이다.
  추상함수는 데이터 유형에 따른 equality를 정의하는 방법을 제공한다.
  rep invariant는 데이터 구조로 인해 발생되는 버그를 더 쉽게 찾을 수 있게 제공한다.


Invariants


  좋은 ADT를 만드는것에 대한 논의에 대해서 가장 중요한 속성은 그 자체로 불변성을 보존하는 것이다...</summary>

  </entry>

  
  <entry>
    <title>Abstract data types(23.10.04)</title>
    <link href="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstract-Data-Types(23.10.04)/" rel="alternate" type="text/html" title="Abstract data types(23.10.04)" />
    <published>2024-12-15T15:10:00+09:00</published>
  
    <updated>2024-12-15T15:10:00+09:00</updated>
  
    <id>http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstract-Data-Types(23.10.04)/</id>
    <content type="text/html" src="http://localhost:4000/learninghub/study/mit6.005-%20software%20construction/Abstract-Data-Types(23.10.04)/" />
    <author>
      <name>김규형</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="MIT6.005- Software Construction" />
    
  

  <summary>Objects


  추상 자료형
  표현 독립성
  추상 데이터 유형의 위험한 문제를 해결하고, 클라이언트가 내부 표현에 대한 가정이 왜 위험하고, 어떻게 그것을 피할 수 있는가?
  연산의 분류와 추상적인 데이터 유형에 대한 좋은 설계 원리를 세우는법


What Abstraction Means


  추상화 데이터 유형은 소프트웨어 공학의 일반적인 원리 중 하나
  다양한 의미로 이야기 되어진다.
    
      추상화 : 낮은 정보를 숨기고 더 단순하게 표현
      모듈화 : 시스템을 모듈로 나누고, 각 구성 요소에 설계, 구현 등의 기능을 추가
      캡슐화 : 모듈 주위에 벽을 만들어 모듈 내부가 각자 스스로에게 책임을 부여, 다른 부분의 무결성 보장
      정보 숨김 : 모듈...</summary>

  </entry>

</feed>


